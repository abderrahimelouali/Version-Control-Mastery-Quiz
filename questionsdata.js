// Easy (Basics) — 20 Questions
const easyQuestions = [
  {
    id: 1,
    question: "What is Git primarily used for?",
    choices: [
      "Hosting websites",
      "Version control",
      "Code compilation",
      "Writing documentation",
    ],
    correctIndex: 1,
    category: "version control",
    difficulty: "easy",
  },
  {
    id: 2,
    question: "Which command initializes a new Git repository?",
    choices: ["git push", "git init", "git start", "git begin"],
    correctIndex: 1,
    category: "git commands",
    difficulty: "easy",
  },
  {
    id: 3,
    question: "Which folder stores Git configuration data in a repo?",
    choices: ["/.git", "/config", "/gitdata", "/history"],
    correctIndex: 0,
    category: "git commands",
    difficulty: "easy",
  },
  {
    id: 4,
    question: "Which command stages files for commit?",
    choices: ["git stage all", "git add", "git commit", "git save"],
    correctIndex: 1,
    category: "git commands",
    difficulty: "easy",
  },
  {
    id: 5,
    question: "Which command records changes to the repository?",
    choices: ["git record", "git push", "git commit", "git store"],
    correctIndex: 2,
    category: "git commands",
    difficulty: "easy",
  },
  {
    id: 6,
    question: "What command lists the current repository status?",
    choices: ["git check", "git list", "git status", "git inspect"],
    correctIndex: 2,
    category: "git basics",
    difficulty: "easy",
  },
  {
    id: 7,
    question: "Which command creates a local copy of a remote repository?",
    choices: ["git clone", "git copy", "git fork", "git init"],
    correctIndex: 0,
    category: "git commands",
    difficulty: "easy",
  },
  {
    id: 8,
    question: "The command to list all existing branches is:",
    choices: ["git show branches", "git list", "git branch", "git tree"],
    correctIndex: 2,
    category: "git branch",
    difficulty: "easy",
  },
  {
    id: 9,
    question: "Which file is used to ignore specific files from Git tracking?",
    choices: [".ignore", ".gitignore", "gitignore.txt", ".git-hidden"],
    correctIndex: 1,
    category: "git config",
    difficulty: "easy",
  },
  {
    id: 10,
    question: "Command to check Git version installed?",
    choices: ["git version", "git -v", "git show-version", "git info"],
    correctIndex: 0,
    category: "git basics",
    difficulty: "easy",
  },
  {
    id: 11,
    question: "What does VCS stand for?",
    choices: [
      "Version Command System",
      "Version Control System",
      "Virtual Control System",
      "Version Compute Service",
    ],
    correctIndex: 1,
    category: "version control",
    difficulty: "easy",
  },
  {
    id: 12,
    question: "Command to display commit history?",
    choices: ["git list", "git timeline", "git history", "git log"],
    correctIndex: 3,
    category: "git commands",
    difficulty: "easy",
  },
  {
    id: 13,
    question: "Default branch name in newer Git versions?",
    choices: ["main", "master", "origin", "trunk"],
    correctIndex: 0,
    category: "git branch",
    difficulty: "easy",
  },
  {
    id: 14,
    question: "Which command removes an untracked file?",
    choices: ["git delete", "rm", "git clean", "git discard"],
    correctIndex: 2,
    category: "git commands",
    difficulty: "easy",
  },
  {
    id: 15,
    question: "To see differences before committing, use:",
    choices: ["git check", "git diff", "git compare", "git history"],
    correctIndex: 1,
    category: "git commands",
    difficulty: "easy",
  },
  {
    id: 16,
    question: "Which file contains project commit messages & history?",
    choices: [
      "repository log",
      "commit.txt",
      "git log file",
      "none (stored internally in .git)",
    ],
    correctIndex: 3,
    category: "version control",
    difficulty: "easy",
  },
  {
    id: 17,
    question: "Which symbol denotes staged changes in git status output?",
    choices: ["A", "M", "?", "S"],
    correctIndex: 0,
    category: "git status",
    difficulty: "easy",
  },
  {
    id: 18,
    question: "Command to configure Git username globally?",
    choices: [
      "git set name",
      "git config —global user.name",
      "git name",
      "git info",
    ],
    correctIndex: 1,
    category: "git config",
    difficulty: "easy",
  },
  {
    id: 19,
    question: "Command to view current branch?",
    choices: ["git branch", "git head", "git show-branch", "git current"],
    correctIndex: 0,
    category: "git branch",
    difficulty: "easy",
  },
  {
    id: 20,
    question: "Git commits are identified by what?",
    choices: ["Numeric ID", "Author name", "SHA hash", "Line number"],
    correctIndex: 2,
    category: "version control",
    difficulty: "easy",
  },
];

// Intermediate — 20 Questions
const intermediateQuestions = [
  {
    id: 21,
    question: "Which command temporarily stores uncommitted changes?",
    choices: ["git store", "git pause", "git stash", "git hold"],
    correctIndex: 2,
    category: "git commands",
    difficulty: "intermediate",
  },
  {
    id: 22,
    question: "What does “git remote -v” show?",
    choices: ["Remote branches", "Remote URLs", "All commits", "Changed files"],
    correctIndex: 1,
    category: "git remote",
    difficulty: "intermediate",
  },
  {
    id: 23,
    question: "Command to merge another branch into current?",
    choices: ["git attach", "git merge", "git connect", "git pull"],
    correctIndex: 1,
    category: "git merge",
    difficulty: "intermediate",
  },
  {
    id: 24,
    question: "What is HEAD in Git?",
    choices: [
      "Current commit reference",
      "First commit",
      "Branch list",
      "Commit author",
    ],
    correctIndex: 0,
    category: "version control",
    difficulty: "intermediate",
  },
  {
    id: 25,
    question: "Command to discard changes in a file?",
    choices: [
      "git clean",
      "git checkout --file",
      "git delete",
      "git reset-file",
    ],
    correctIndex: 1,
    category: "git commands",
    difficulty: "intermediate",
  },
  {
    id: 26,
    question:
      "Which Git command updates local repo from remote without merging?",
    choices: ["git pull", "git fetch", "git update", "git download"],
    correctIndex: 1,
    category: "git remote",
    difficulty: "intermediate",
  },
  {
    id: 27,
    question: "What is “origin” in Git?",
    choices: [
      "Default branch",
      "Remote repository alias",
      "Root commit",
      "Branch origin",
    ],
    correctIndex: 1,
    category: "git remote",
    difficulty: "intermediate",
  },
  {
    id: 28,
    question: "Which merge strategy combines histories linearly?",
    choices: ["Squash", "Rebase", "Cherry-pick", "Fast-forward"],
    correctIndex: 3,
    category: "git merge",
    difficulty: "intermediate",
  },
  {
    id: 29,
    question: "Command to remove a branch locally?",
    choices: [
      "git delete branch",
      "git branch --remove",
      "git branch -d",
      "git rm branch",
    ],
    correctIndex: 2,
    category: "git branch",
    difficulty: "intermediate",
  },
  {
    id: 30,
    question: "Command to rename a branch?",
    choices: ["git branch -m", "git rename", "git switch -r", "git change"],
    correctIndex: 0,
    category: "git branch",
    difficulty: "intermediate",
  },
  {
    id: 31,
    question: "How to undo last commit but keep changes staged?",
    choices: [
      "git reset --soft HEAD~1",
      "git revert HEAD",
      "git reset --hard HEAD~1",
      "git undo",
    ],
    correctIndex: 0,
    category: "git reset",
    difficulty: "intermediate",
  },
  {
    id: 32,
    question: "Which command configures a remote repository?",
    choices: [
      "git remote add origin <url>",
      "git origin set <url>",
      "git add remote <url>",
      "git connect <url>",
    ],
    correctIndex: 0,
    category: "git remote",
    difficulty: "intermediate",
  },
  {
    id: 33,
    question: "Which command downloads & merges remote changes?",
    choices: ["git fetch", "git pull", "git clone", "git sync"],
    correctIndex: 1,
    category: "git remote",
    difficulty: "intermediate",
  },
  {
    id: 34,
    question: "File containing commit authors & email?",
    choices: [".gitconfig", "config.yml", ".git/credentials", "gitinfo.txt"],
    correctIndex: 0,
    category: "git config",
    difficulty: "intermediate",
  },
  {
    id: 35,
    question: "Command to unstage a staged file?",
    choices: [
      "git remove",
      "git reset <file>",
      "git discard <file>",
      "git unstage",
    ],
    correctIndex: 1,
    category: "git reset",
    difficulty: "intermediate",
  },
  {
    id: 36,
    question: "“Detached HEAD” means what?",
    choices: [
      "HEAD points to commit, not branch",
      "HEAD lost",
      "HEAD not initialized",
      "HEAD empty",
    ],
    correctIndex: 0,
    category: "git concepts",
    difficulty: "intermediate",
  },
  {
    id: 37,
    question: "Command to view a diff of staged vs committed files?",
    choices: [
      "git diff --staged",
      "git diff --cached",
      "both of the above",
      "git status -diff",
    ],
    correctIndex: 2,
    category: "git diff",
    difficulty: "intermediate",
  },
  {
    id: 38,
    question: "Command to create a new branch and switch?",
    choices: [
      "git new branch",
      "git branch & switch",
      "git checkout -b",
      "git branch -s",
    ],
    correctIndex: 2,
    category: "git branch",
    difficulty: "intermediate",
  },
  {
    id: 39,
    question: "To check remote connection, use:",
    choices: [
      "git test remote",
      "git remote show origin",
      "git verify remote",
      "git ping origin",
    ],
    correctIndex: 1,
    category: "git remote",
    difficulty: "intermediate",
  },
  {
    id: 40,
    question: "Which command lists commits between two branches?",
    choices: [
      "git compare",
      "git diff branch1..branch2",
      "git log branch1..branch2",
      "git range",
    ],
    correctIndex: 2,
    category: "git log",
    difficulty: "intermediate",
  },
];

// Hard — 20 Questions
const hardQuestions = [
  {
    id: 41,
    question: "What does the command “git revert <commit>” do?",
    choices: [
      "Deletes commit",
      "Creates new commit that undoes previous",
      "Removes commit from log",
      "Resets to HEAD",
    ],
    correctIndex: 1,
    category: "git revert",
    difficulty: "hard",
  },
  {
    id: 42,
    question: "Which command can edit commit history interactively?",
    choices: ["git amend", "git rebase -i", "git rewrite", "git edit"],
    correctIndex: 1,
    category: "git rebase",
    difficulty: "hard",
  },
  {
    id: 43,
    question: "“git cherry-pick” is used for?",
    choices: [
      "Apply specific commit to another branch",
      "Copy all commits",
      "Squash commits",
      "Undo merge",
    ],
    correctIndex: 0,
    category: "git cherry-pick",
    difficulty: "hard",
  },
  {
    id: 44,
    question: "Which reflog command shows all HEAD movements?",
    choices: ["git reflog", "git history -a", "git log -head", "git ref show"],
    correctIndex: 0,
    category: "git reflog",
    difficulty: "hard",
  },
  {
    id: 45,
    question: "Command to change last commit message?",
    choices: [
      "git amend message",
      "git commit --amend",
      "git change-message",
      "git reword",
    ],
    correctIndex: 1,
    category: "git commit",
    difficulty: "hard",
  },
  {
    id: 46,
    question: "Difference between merge and rebase?",
    choices: [
      "Merge rewrites history, rebase keeps it",
      "Rebase rewrites history, merge preserves it",
      "Both same",
      "None alters history",
    ],
    correctIndex: 1,
    category: "git concepts",
    difficulty: "hard",
  },
  {
    id: 47,
    question: "“git bisect” helps with?",
    choices: [
      "Finding commit that introduced a bug",
      "Comparing branches",
      "Rewriting history",
      "Merging conflicts",
    ],
    correctIndex: 0,
    category: "git bisect",
    difficulty: "hard",
  },
  {
    id: 48,
    question: "Command to show files changed in a specific commit?",
    choices: [
      "git diff <commit>",
      "git show <commit>",
      "git log -p",
      "git list-files <commit>",
    ],
    correctIndex: 1,
    category: "git show",
    difficulty: "hard",
  },
  {
    id: 49,
    question: "“git gc” does what?",
    choices: [
      "Deletes repo",
      "Optimizes repository and removes unnecessary files",
      "Cleans branches",
      "Removes conflicts",
    ],
    correctIndex: 1,
    category: "git maintenance",
    difficulty: "hard",
  },
  {
    id: 50,
    question: "To revert multiple commits at once:",
    choices: [
      "git revert <range>",
      "git reset <range>",
      "git undo",
      "git back",
    ],
    correctIndex: 0,
    category: "git revert",
    difficulty: "hard",
  },
  {
    id: 51,
    question: "Command to rename a remote?",
    choices: [
      "git remote rename <old> <new>",
      "git rename remote",
      "git config rename",
      "git alias remote",
    ],
    correctIndex: 0,
    category: "git remote",
    difficulty: "hard",
  },
  {
    id: 52,
    question: "What does “git tag -a v1.0 -m message” do?",
    choices: [
      "Deletes tag",
      "Creates annotated tag",
      "Lists tags",
      "Commits with tag",
    ],
    correctIndex: 1,
    category: "git tags",
    difficulty: "hard",
  },
  {
    id: 53,
    question: "Detached HEAD can lead to?",
    choices: [
      "Lost commits if not referenced",
      "Fast-forward merges",
      "Auto conflict resolution",
      "Safer commits",
    ],
    correctIndex: 0,
    category: "git heads",
    difficulty: "hard",
  },
  {
    id: 54,
    question: "To see all remotes and their fetch URLs:",
    choices: [
      "git remote -v",
      "git config remotes",
      "git remotes",
      "git origin show",
    ],
    correctIndex: 0,
    category: "git remote",
    difficulty: "hard",
  },
  {
    id: 55,
    question: "Command to delete remote branch?",
    choices: [
      "git push origin --delete branch",
      "git rm remote branch",
      "git delete origin",
      "git remove branch",
    ],
    correctIndex: 0,
    category: "git remote",
    difficulty: "hard",
  },
  {
    id: 56,
    question: "To stage parts of a file interactively:",
    choices: [
      "git add --patch",
      "git stage partial",
      "git interactive",
      "git edit add",
    ],
    correctIndex: 0,
    category: "git stage",
    difficulty: "hard",
  },
  {
    id: 57,
    question: "To squash commits interactively, use:",
    choices: [
      "git squash -i",
      "git merge --squash",
      "git rebase -i",
      "git combine",
    ],
    correctIndex: 2,
    category: "git rebase",
    difficulty: "hard",
  },
  {
    id: 58,
    question: "Command to restore deleted branch if SHA known?",
    choices: [
      "git checkout <sha>",
      "git restore branch <sha>",
      "git reattach <sha>",
      "git recover",
    ],
    correctIndex: 0,
    category: "git recovery",
    difficulty: "hard",
  },
  {
    id: 59,
    question: "“git worktree” allows you to?",
    choices: [
      "Check out multiple branches simultaneously",
      "Clone faster",
      "Rebase remotely",
      "Commit automatically",
    ],
    correctIndex: 0,
    category: "git worktree",
    difficulty: "hard",
  },
  {
    id: 60,
    question: "Command to verify repository integrity?",
    choices: ["git fsck", "git verify", "git check-integrity", "git validate"],
    correctIndex: 0,
    category: "git maintenance",
    difficulty: "hard",
  },
];

// Expert — 20 Questions
const expertQuestions = [
  {
    id: 61,
    question: "In Git, what does “git filter-branch” do?",
    choices: [
      "Removes commits",
      "Rewrites commit history across branches",
      "Clones history",
      "Filters unstaged changes",
    ],
    correctIndex: 1,
    category: "git filter",
    difficulty: "expert",
  },
  {
    id: 62,
    question: "Purpose of the “git rev-parse” command?",
    choices: [
      "Convert ref names to SHA",
      "Show commit logs",
      "Parse remote URLs",
      "Clean refs",
    ],
    correctIndex: 0,
    category: "git internals",
    difficulty: "expert",
  },
  {
    id: 63,
    question: "Which command can apply a patch from another repo?",
    choices: [
      "git format-patch",
      "git apply",
      "git cherry-pick external",
      "Both A and B",
    ],
    correctIndex: 3,
    category: "git patch",
    difficulty: "expert",
  },
  {
    id: 64,
    question: "How do you handle submodules recursively?",
    choices: [
      "git clone --recurse-submodules",
      "git submodule update",
      "git pull-sub",
      "git add --include-sub",
    ],
    correctIndex: 0,
    category: "git submodules",
    difficulty: "expert",
  },
  {
    id: 65,
    question: "To remove a file from all commits in history:",
    choices: [
      "git filter-branch --tree-filter",
      "git rm",
      "git purge",
      "git delete",
    ],
    correctIndex: 0,
    category: "git filter",
    difficulty: "expert",
  },
  {
    id: 66,
    question: "How to sign commits with GPG?",
    choices: ["git sign", "git commit -S", "git gpg commit", "git verified"],
    correctIndex: 1,
    category: "git security",
    difficulty: "expert",
  },
  {
    id: 67,
    question: "Command to reapply all commits from one branch onto another?",
    choices: ["git merge", "git rebase", "git replay", "git transcribe"],
    correctIndex: 1,
    category: "git rebase",
    difficulty: "expert",
  },
  {
    id: 68,
    question: "What is “git cat-file” used for?",
    choices: [
      "View object contents in database",
      "List commits",
      "Check logs",
      "Delete objects",
    ],
    correctIndex: 0,
    category: "git internals",
    difficulty: "expert",
  },
  {
    id: 69,
    question: "Command to bundle an entire repo into one file?",
    choices: ["git archive", "git bundle", "git tar", "git zip"],
    correctIndex: 1,
    category: "git transport",
    difficulty: "expert",
  },
  {
    id: 70,
    question: "What is “git rerere”?",
    choices: [
      "Resolves recurring merge conflicts automatically",
      "Resets remotes",
      "Removes reflog entries",
      "Recovers detached HEADs",
    ],
    correctIndex: 0,
    category: "git rerere",
    difficulty: "expert",
  },
  {
    id: 71,
    question: "Which plumbing command lists objects in repository?",
    choices: [
      "git ls-files",
      "git ls-tree",
      "git list-objects",
      "git cat-file",
    ],
    correctIndex: 1,
    category: "git internals",
    difficulty: "expert",
  },
  {
    id: 72,
    question: "Command to remove unreachable objects from database?",
    choices: ["git clean", "git prune", "git fsck", "git rm"],
    correctIndex: 1,
    category: "git maintenance",
    difficulty: "expert",
  },
  {
    id: 73,
    question: "To extract a patch from a commit, use:",
    choices: [
      "git diff > patch",
      "git format-patch -1 <sha>",
      "git create patch",
      "git export commit",
    ],
    correctIndex: 1,
    category: "git patch",
    difficulty: "expert",
  },
  {
    id: 74,
    question: "What does “git reflog expire” do?",
    choices: [
      "Deletes old reflog entries",
      "Refreshes reflog",
      "Shows reflog",
      "Delays cleanup",
    ],
    correctIndex: 0,
    category: "git reflog",
    difficulty: "expert",
  },
  {
    id: 75,
    question: "To recover lost commits, you can use:",
    choices: ["git history", "git reflog", "git restore", "git returns"],
    correctIndex: 1,
    category: "git recovery",
    difficulty: "expert",
  },
  {
    id: 76,
    question: "To compare commits from another branch without switching:",
    choices: [
      "git diff branchA..branchB",
      "git compare-other",
      "git fetch diff",
      "git patch diff",
    ],
    correctIndex: 0,
    category: "git diff",
    difficulty: "expert",
  },
  {
    id: 77,
    question: "Command to verify signed commits?",
    choices: [
      "git verify-commit",
      "git gpg-verify",
      "git check-sign",
      "git validate commit",
    ],
    correctIndex: 0,
    category: "git security",
    difficulty: "expert",
  },
  {
    id: 78,
    question: "To change author info of last commit:",
    choices: [
      "git commit --amend --author",
      "git author set",
      "git reset author",
      "git modify commit",
    ],
    correctIndex: 0,
    category: "git commit",
    difficulty: "expert",
  },
  {
    id: 79,
    question: "To permanently remove sensitive data from remote repo:",
    choices: [
      "git filter-repo",
      "git delete",
      "git remove-remote",
      "git hidden",
    ],
    correctIndex: 0,
    category: "git filter",
    difficulty: "expert",
  },
  {
    id: 80,
    question: "Command to inspect Git object type by SHA:",
    choices: [
      "git type <sha>",
      "git cat-file -t <sha>",
      "git info <sha>",
      "git inspect <sha>",
    ],
    correctIndex: 1,
    category: "git internals",
    difficulty: "expert",
  },
];

export { easyQuestions, intermediateQuestions, hardQuestions, expertQuestions };
